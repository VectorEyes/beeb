;-------------------------------------------------------------------------
;
; BBC Micro include file for 64tass
;
; Copyright (C) 2018-9 Tom Seddon
; 
; This program is free software: you can redistribute it and/or
; modify it under the terms of the GNU General Public License as
; published by the Free Software Foundation, either version 3 of the
; License, or (at your option) any later version.
; 
; This program is distributed in the hope that it will be useful, but
; WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
; General Public License for more details.
; 
; You should have received a copy of the GNU General Public License
; along with this program. If not, see
; <https://www.gnu.org/licenses/>.
;
;-------------------------------------------------------------------------
; 
;-------------------------------------------------------------------------

; MOS entry points

                .weak
osrdsc=$ffb9
oseven=$ffbf
gsinit=$ffc2
gsread=$ffc5
osfind=$ffce
osbput=$ffd4
osbget=$ffd7
osfile=$ffdd
osargs=$ffda
osrdch=$ffe0
osasci=$ffe3
osnewl=$ffe7
oswrch=$ffee
osword=$fff1
osbyte=$fff4
oscli=$fff7
                .endweak
                
;-------------------------------------------------------------------------

; Vectors

                .weak
userv=$200
brkv=$202
irq1v=$204
irq2v=$206
cliv=$208
bytev=$20a
wordv=$20c
wrchv=$20e
rdchv=$210
filev=$212
argsv=$214
bgetv=$216
bputv=$218
gbpbv=$21a
findv=$21c
fscv=$21e
eventv=$220
uptv=$222
vduv=$226
keyv=$228
insv=$22a
remv=$22c
cnpv=$22e
ind1v=$230
ind2v=$232
ind3v=$234
                .endweak

;-------------------------------------------------------------------------

; Key codes
                .weak
key_space=$62
key_comma=$66
key_minus=$17
key_stop=$67
key_slash=$68
key_0=$27
key_1=$30
key_2=$31
key_3=$11
key_4=$12
key_5=$13
key_6=$34
key_7=$24
key_8=$15
key_9=$26
key_colon=$48
key_semicolon=$57
key_at=$47
key_a=$41
key_b=$64
key_c=$52
key_d=$32
key_e=$22
key_f=$43
key_g=$53
key_h=$54
key_i=$25
key_j=$45
key_k=$46
key_l=$56
key_m=$65
key_n=$55
key_o=$36
key_p=$37
key_q=$10
key_r=$33
key_s=$51
key_t=$23
key_u=$35
key_v=$63
key_w=$21
key_x=$42
key_y=$44
key_z=$61
key_left_square_bracket=$38
key_backslash=$78
key_right_square_bracket=$58
key_caret=$18
key_underline=$28
key_escape=$70
key_tab=$60
key_caps_lock=$40
key_ctrl=$1
key_shift_lock=$50
key_shift=$0
key_delete=$59
key_copy=$69
key_return=$49
key_up=$39
key_down=$29
key_left=$19
key_right=$79
key_f0=$20
key_f1=$71
key_f2=$72
key_f3=$73
key_f4=$14
key_f5=$74
key_f6=$75
key_f7=$16
key_f8=$76
key_f9=$77
                .endweak                
                
;-------------------------------------------------------------------------

; Tube transfer reasons

tube_multi_byte_parasite_to_host=0
tube_multi_byte_host_to_parasite=1
tube_multi_pairs_parasite_to_host=2
tube_multi_pairs_host_to_parasite=3
tube_execute=4
tube_256_byte_parasite_to_host=6
tube_256_byte_host_to_parasite=7

;-------------------------------------------------------------------------

; Hardware stuff

;-------------------------------------------------------------------------

; ROMSEL
                .weak
                .virtual $fe30
romsel: .fill 0
                .endv
                .endweak

;-------------------------------------------------------------------------

; ACCCON
                .weak
                .virtual $fe34
acccon: .block
;D=1 = display shadow RAM; D=0 = display main RAM
d=$01

;E=1 = VDU code ($c000-$dfff in MOS ROM) accesses shadow RAM; E=0 =
;VDU code accesses main RAM
e=$02

;X=1 = shadow RAM at $3000; X=0 = main RAM at $3000
x=$04

;Y=1 = HAZEL at $c000; Y=0 = MOS ROM at $c000
y=$08

;ITU=1 = access internal Tube; ITU=0 = access external Tube
itu=$10

;IFJ=1 = $fc00...$fdff accesses cartridge; IFJ=0 = $fc00...$fdff
;accesses 1MHz bus
ifj=$20

; TST=1 = read MOS ROM at $fc00...$feff; TST=0 = read I/O at
; $fc00...$feff
tst=$40

;IRR=1 = IRQ to CPU
irr=$80
                .bend
                .endv
                .endweak

;-------------------------------------------------------------------------

                .weak
                .virtual $fe20
video_ula_control: .block
; Flashing colour select
flash=$01

; If set, teletext mode
teletext=$02

; Shift rate
shift_rate_mask=$0c
shift_rate_16MHz=$0c
shift_rate_8MHz=$08
shift_rate_4MHz=$04
shift_rate_2MHz=$00

; 2MHz CRTC flag    
crtc_2MHz=$10

; Cursor bits
cursor_mask=$e0
                .bend
                .endv
                .endweak

                .weak
video_ula_palette=$fe21
                .endweak
                
;-------------------------------------------------------------------------

VIAIRQ: .block
ca2=$01
ca1=$02
shift=$04
cb2=$08
cb1=$10
t2=$20
t1=$40
                .bend
                
VIA: .struct                    ;
orb:
irb:
                .fill 1         ;0
ora:
ira:
                .fill 1         ;1
ddrb:
                .fill 1         ;2
ddra:
                .fill 1         ;3
t1c_l:
                .fill 1         ;4
t1c_h:
                .fill 1         ;5
t1l_l:
                .fill 1         ;6
t1l_h:
                .fill 1         ;7
t2c_l:
                .fill 1         ;8
t2c_h:
                .fill 1         ;9
sr:
                .fill 1         ;10
acr:
                .fill 1         ;11
pcr:
                .fill 1         ;12
ifr:
                .fill 1         ;13
ier:
                .fill 1         ;14
ora_no_handshake:
ira_no_handshake:
                .fill 1         ;15
                .ends

                .virtual $fe40
system_via: .dstruct VIA
                .endv

                .virtual $fe60
user_via: .dstruct VIA
                .endv
                
;-------------------------------------------------------------------------

                .virtual $fee0
                
tube_fifo1_status: .fill 1
tube_fifo1_data: .fill 1
tube_fifo2_status: .fill 1
tube_fifo2_data: .fill 1
tube_fifo3_status: .fill 1
tube_fifo3_data: .fill 1
tube_fifo4_status: .fill 1
tube_fifo4_data: .fill 1
                
                .endv

;-------------------------------------------------------------------------
;
; 1770/1772. Use .dstruct to put this wherever necessary.

WD177x: .struct
status:
command:
                .fill 1
track:
                .fill 1
sector:
                .fill 1
data:
                .fill 1
                .ends

;-------------------------------------------------------------------------

; if language_entry is 0, no language entry.
;
; if version_string is empty, no version string.
emit_rom_header .macro language_entry,service_entry,version_number,title_string,version_string,copyright_string
start:
                ; +00 Language entry point
                .if \language_entry!=0
language_entry_flag=$40
                jmp \language_entry
                .else
language_entry_flag=0
                brk
                brk
                brk
                .endif

                ; +03 Service entry point
                jmp \service_entry

                ; +06 ROM type
                .byte $82|language_entry_flag

                ; +07 Copyright offset
                .byte copyright-1-start

                ; +08 Version number
                .byte \version_number

                ; +09 Title string
name:
                .text \title_string
name_end:
                .byte 0
version:
                .text \version_string
version_end:
                .if \version_string!=''
                ; +vv Version string
                .byte 0
                .endif

                ; +nn Copyright string
                .byte 0
copyright:
                .text '(C)'
                .if \copyright_string!=''
                .byte ' ',\copyright_string
                .endif
copyright_end:
                .byte 0
                
                .endm
                